# ClassWaves Backend — Example Environment Variables

# === WebSocket Audio Backpressure (Per Socket) ===
# Upper bounds for per-socket audio traffic. Exceeding these causes soft drops
# with client-side hints to reduce send rate.
WS_MAX_AUDIO_EVENTS_PER_SEC=20
WS_MAX_AUDIO_BYTES_PER_SEC=1048576
WS_MAX_AUDIO_CHUNK_BYTES=2097152

# === Dev Observability ===
# Token used to gate /api/v1/debug/websocket/active-connections in production.
# In development (NODE_ENV !== 'production'), this endpoint is open.
DEV_OBSERVABILITY_TOKEN=

# Disable default Prometheus process metrics (useful in tests to avoid open handles)
# 1 = disable default prom-client metrics collection
METRICS_DEFAULT_DISABLED=0

# Note: This example only lists variables introduced by the WebSocket audio
# backpressure and dev observability work. Refer to README.md for the full
# environment template covering Databricks, Redis, JWT, OAuth, Whisper, etc.

# === Redis & Cache Defaults (enabled by default) ===
# Redis connection
REDIS_URL=redis://localhost:6379
# Optional password if your Redis requires auth
REDIS_PASSWORD=
# Connection sizing and timeouts
REDIS_POOL_SIZE=5
REDIS_TIMEOUT=3000

# Cache key prefixing (cw:{env}:...) [enabled by default; set to 0 to disable]
CW_CACHE_PREFIX_ENABLED=1
# During migration, dual-write to legacy keys (analytics/query caches) [enabled by default]
CW_CACHE_DUAL_WRITE=1
# Tag epochs for O(1) invalidation via versioned keys [enabled by default]
CW_CACHE_EPOCHS_ENABLED=1
# Cross-instance NX locks for hot key coalescing [enabled by default]
CW_CACHE_NX_LOCKS=1
# Compression threshold for large cached values (bytes)
CW_CACHE_COMPRESS_THRESHOLD=4096

# Rate limiter key prefix migration to cw:{env}:rl:* [enabled by default]
CW_RL_PREFIX_ENABLED=1

# === Feature Flags ===
# Enable end-of-session AI summaries (group + session)
FEATURE_GROUP_SESSION_SUMMARIES=0

# Optional: concurrency limit for parallel group summary generation
SUMMARY_GROUP_CONCURRENCY=4

# === Databricks AI Summarizer (E2E/live) ===
# Databricks workspace URL and PAT token must be set
DATABRICKS_HOST=https://dbc-d5db37cb-5441.cloud.databricks.com
# DATABRICKS_TOKEN=your-pat-token

# Tiered AI analysis endpoints (required by AI service)
# Tier 1: real-time group analysis
AI_TIER1_ENDPOINT=/serving-endpoints/tier1-group-analysis/invocations
# Tier 2: deep session analysis (also used as summarizer fallback)
# AI_TIER2_ENDPOINT=/serving-endpoints/llm-t2/invocations

# Use the summarizer serving endpoint for end-of-session summaries
AI_SUMMARIZER_ENDPOINT=/serving-endpoints/wavelistener-summarizer/invocations
# Payload mode: 'messages' (default) or 'input' depending on your serving endpoint contract
# AI_SUMMARIZER_PAYLOAD_MODE=messages
# Timeout in ms (defaults to tier2 timeout when unset)
# AI_SUMMARIZER_TIMEOUT_MS=15000

# If not using AI_SUMMARIZER_ENDPOINT, summarizer falls back to AI_TIER2_ENDPOINT

# === Audio → Insights Phase 1 ===
# STT provider: 'openai' to enable Whisper; set 'off' to disable transcription (dev/testing)
STT_PROVIDER=openai
# Enable batch metrics persistence (opt-in)
ENABLE_DB_METRICS_PERSIST=0
# BullMQ worker concurrency for STT jobs
STT_QUEUE_CONCURRENCY=10
# Optionally transcode invalid formats to WAV in-memory (best-effort)
STT_TRANSCODE_TO_WAV=1
# Transcript Redis TTL (hours)
TRANSCRIPT_REDIS_TTL_HOURS=12
# Batch flush interval for transcript persistence (secs)
TRANSCRIPT_BATCH_FLUSH_SECS=120

# Dev: run STT worker in the same process as the API server (for convenience)
# 1 = start inline worker on server start; 0 = run worker as a separate process (npm run stt:worker)
STT_INLINE_WORKER=0

# Whisper health check on /api/v1/health (disabled by default to avoid outbound calls in dev)
OPENAI_WHISPER_HEALTH_ENABLED=0

# === REST-first Live STT Control (Server-driven) ===
# Server-driven audio flush cadence (ms); clients stop→upload→start on this cadence
WS_AUDIO_FLUSH_CADENCE_MS=10000
# Stall detector sweep interval (ms)
WS_STALL_CHECK_INTERVAL_MS=10000
# Cooldown between stall notifications per group (ms)
WS_STALL_NOTIFY_COOLDOWN_MS=30000
# Optional hint for STT language when session setting is absent
STT_LANGUAGE_HINT=en

# === REST Guardrails ===
# Minimum interval between REST window uploads per group (ms); requests within this are 429 with Retry-After
AUDIO_WINDOW_MIN_INTERVAL_MS=800

# === Guidance Gating & Delivery (Tier1/Tier2) ===
# Threshold to consider a group on-track (applied to both topicalCohesion and conceptualDensity)
GUIDANCE_TIER1_ONTRACK_THRESHOLD=0.50
# Optional higher return threshold to reduce flicker near the on-track line (disabled when unset)
# GUIDANCE_TIER1_RETURN_THRESHOLD=0.55
# Minimum confidence for Tier1 gating to apply
GUIDANCE_TIER1_CONF_MIN=0.50
# Warm-up: suppress Tier1 emits/prompts for first N ms after session start (STT + buffering continue)
GUIDANCE_TIER1_WARMUP_MS=60000
# First Tier1 analysis window (seconds) after warm-up to provide more context, once per session:group
GUIDANCE_TIER1_FIRST_WINDOW_SECONDS=60
# Suppress Tier1 emits/prompts while on-track (emit analytics instead)
GUIDANCE_TIER1_SUPPRESS_ONTRACK=1
# Keep Tier2 passive: compute + persist, but do not emit/prompts by default
GUIDANCE_TIER2_PASSIVE=1
